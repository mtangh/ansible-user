---
# tasks file for ansible-user.xml
# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline

- hosts: all
  become: yes
  gather_facts: yes

  tags:
  - ansible-user

  vars:

    ansible_user:
      name: ansible
      passwd: 
      uid: 61426
      home: /home/ansible
      shell: /bin/bash
      key: ansible-id_rsa

  tasks:

  - name: "ansible-user | Set facts."
    set_fact:
      _am_username: "{{ ansible_user.name|d('ansible') }}"
      _am_password: "{{ ansible_user.passwd|d(none) }}"
      _am_user_uid: "{{ ansible_user.uid|d(61426) }}"
      _am_userhome: "{{ ansible_user.home|d('/home/anaible') }}"
      _am_shellcmd: "{{ ansible_user.shell|d('/bin/bash') }}"
      _am_userdesc: "{{ ansible_user.comment|d('Ansible Management User') }}"
      _am_key_file: "{{ anaible_manager.key|d('ansible-id_rsa') }}"
      _am_etc_pswd: "{{ anaible_manager_passwd_file|d('/etc/passwd') }}"
      _am_keygenop: "{{ ansible_user_sshkeygen_opts
                        if ansible_user_sshkeygen_opts|d(none) is not none
                        else '-t rsa -b 4096 -N ""' }}"
      _am_sudodefs: "{{ ansible_user_sudo_defaults
                        if ansible_user_sudo_defaults|d(none) is not none
                        and ansible_user_sudo_defaults|d(none) is not none
                        else ['!requiretty','env_keep += SSH_AUTH_SOCK'] }}"
    tags:
    - always

  - block:

    - name: "ansible-user | Create a ssh key."
      shell: |
        [ -f "{{ _am_key_file }}" ] &&
        [ -n "$(type -P ssh-keygen)" ] &&
        ssh-keygen -C "ansible, $(date)" {{ _am_keygenop }} -f "{{ _am_key_file }}"

    when: inventory_hostname|d('')|regexp('^(localhost|127\.0\.0\.1)$')
    tags:
    - tagged
    - ansible-user-ssh-keygen

  - block:
  
    - name: "ansible-user | Finding free uid between {{ _am_mini_num }} and {{ _am_maxi_num }}"
      shell: |
        cat {{ _am_uid_file }} |
        awk -F: '$3 >= {{ _am_mini_num }} && $3 < {{ _am_maxi_num }} {print($3);};' |
        sort -u |cat -n |
        awk '($2 - {{ _am_mini_num }} + 1) > $1 {print($2);}' |
        head -n1 || echo "{{ _am_mini_num }}"
      register: _am_r_minuid
      changed_when: false
      ignore_errors: true

    - name: "ansible-user | Generate passwod for new user '{{ _am_username }}'."
      shell: |
        if [ -n "{{ _am_password }}" ]
        then echo "{{ _am_password }}"
        else mktemp -u XXXXXXXXXXXX
        fi
      register: _am_r_passwd
      changed_when: false
      ignore_errors: true

    vars:
      _am_uid_file: "{{ _am_etc_pswd }}"
      _am_mini_num: "{{ _am_user_uid }}"
      _am_maxi_num: "{{ _am_user_uid|int + 99 }}"
    tags:
    - ansible-user-create-user

  - block:

    - name: "ansible-user | Create a group '{{ _am_username }}'."
      group:
        name: "{{ _am_username }}"
        gid: "{{ _am_free_uid }}"
        state: present

    - name: "ansible-user | Create user '{{ _am_username }}'."
      user: 
        name: "{{ _am_username }}"
        uid: "{{ _am_free_uid }}"
        group: "{{ _am_username }}"
        groups: "{{ _am_username }}"
        home: "{{ _am_userhome }}"
        shell: "{{ _am_shellcmd }}" 
        createhome: yes
        comment: "{{ _am_userdesc }}"
        password: "{{ _am_new_pswd|password_hash('sha512') }}"
        state: present
 
    vars:
      _am_free_uid: "{{ _am_r_minuid.stdout_line
                        if _am_r_minuid.stdout_line|d('')|length >0
                        else _am_user_uid }}"
      _am_new_pswd: "{{ _am_r_passwd.stdout_line
                        if _am_r_passwd.stdout_line|d('')|length >0
                        else none }}"
    tags:
    - ansible-user-create-user

  - block:
  
    - name: "ansible-user | Crate a '{{ _am_userhome }}/.ssh' directory."
      file:
        path: "{{ _am_userhome }}/.ssh"
        state: directory
        owner: "{{ _am_username }}"
        group: "{{ _am_username }}"
        mode: "0700"
   
    - name: "ansible-user | Setup authorized_keys"
      authorized_key:
        user: "{{ _am_username }}"
        key: "{{ _am_key_data }}"
        state: present
      when: _am_key_data|d('')|length > 0

    vars:
      _am_key_data: "{{ lookup('file',('%s.pub'|format(_am_key_file))) }}"
    when: _am_key_file|d('')|length > 0
    tags:
    - ansible-user-authorized-keys

  - block:

    - name: "ansible-user | Install the sudo."
      package:
        name: "sudo"
        state: latest
 
    - name: "ansible-user | Checking the '{{ _am_sudo_dir }}'."
      stat: path="{{ _am_sudo_dir }}/{{ _am_username }}"
      register: _am_sudod_st
      ignore_errors: true
  
    - name: "ansible-user | Create a ansible in the '{{ _am_sudo_dir }}'."
      blockinfile:
        path: "{{ _am_sudo_dir }}/{{ _am_username }}"
        block: |
          %{{ _am_username }}\tALL=(ALL)\tNOPASSWD: ALL
          {%  for _entry in _am_sudodefs|d([]) if _entry|d('')|string|trim|length > 0 %}
          Defaults:%{{ _am_username }} {{ _entry }}
          {%  endfor %}
      when: _am_sudod_st.stat|d(none) is not none
            and _am_sudod_st.stat.isdir|d(false) == true

    - name: "ansible-user | Checking user in sudoers."
      shell: egrep "^%{{ _am_username }}[ \t]+" "{{ _am_sudofile }}"
      register: _am_issudoer
      ignore_errors: true
      when: (_am_sudod_st.stat|d(none) is none
             or _am_sudod_st.stat.isdir|d(false) == false)

    - name: "ansible-user | Adding the entry '{{ _am_username }}' group."
      lineinfile: 
        dest: "{{ _am_sudofile }}"
        state: present
        backup: yes
        insertafter: "^(#|)[ ]*%wheel[ \t]+.*"
        line: |
          %{{ _am_username }}\tALL=(ALL)\tNOPASSWD: ALL
          {%  for _entry in _am_sudodefs|d([]) if _entry|d('')|string|trim|length > 0 %}
          Defaults:%{{ _am_username }} {{ _entry }}
          {%  endfor %}
      when: _am_issudoer|d(none) is not none
            and _am_issudoer.rc|d(0) != 0
            and (_am_lfresult|d(none) is none
              or _am_lfresult|success == false)

    vars:
      _am_sudofile: /etc/sudoers
      _am_sudo_dir: /etc/sudoers.d
    tags:
    - ansible-user-sudoers

